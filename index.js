import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import qrcode from "qrcode-terminal";
import Tesseract from "tesseract.js";
import { Client, LocalAuth } from "whatsapp-web.js";
import { spamKeywords } from "./spamKeywords.js";

// ==== Paths & env ====
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏ WA –∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞ Render ‚Äî –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä—É–π –¥–∏—Å–∫ –∫ /data)
const DATA_DIR = process.env.DATA_DIR || path.join(__dirname, ".data");
const AUTH_DIR = process.env.AUTH_DIR || path.join(DATA_DIR, "session");
const WHITELIST_FILE = process.env.WHITELIST_FILE || path.join(DATA_DIR, "whitelist.json");

// –≤–∫–ª/–≤—ã–∫–ª OCR –∫–∞—Ä—Ç–∏–Ω–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ)
const ENABLE_OCR = (process.env.ENABLE_OCR || "true").toLowerCase() === "true";
const OCR_LANG = process.env.OCR_LANG || "rus+eng"; // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å "kaz", –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫

// –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏
fs.mkdirSync(DATA_DIR, { recursive: true });
fs.mkdirSync(AUTH_DIR, { recursive: true });

// ==== whitelist helpers ====
function loadWhitelist() {
  if (!fs.existsSync(WHITELIST_FILE)) return {};
  try {
    return JSON.parse(fs.readFileSync(WHITELIST_FILE, "utf8"));
  } catch {
    return {};
  }
}

function saveWhitelist(obj) {
  fs.writeFileSync(WHITELIST_FILE, JSON.stringify(obj, null, 2), "utf8");
}

// normalize: –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º '7701xxx@c.us' ‚Üí '7701xxx'
function normalizeJid(jid) {
  if (!jid) return "";
  const id = jid.split("@")[0];
  return id.replace(/[^\d+]/g, ""); // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—ã –∏ '+'
}

function isWhitelisted(jid) {
  const phone = normalizeJid(jid);
  const list = loadWhitelist();
  const until = list[phone];
  if (!until) return false;
  const now = new Date();
  const exp = new Date(until);
  return exp >= now;
}

// ==== spam checks ====
function isSpamText(text) {
  if (!text) return false;
  const t = text.toLowerCase();
  return spamKeywords.some(k => t.includes(k));
}

async function extractTextFromMedia(message) {
  try {
    const media = await message.downloadMedia();
    if (!media) return "";
    const buf = Buffer.from(media.data, "base64");
    const { data: { text } } = await Tesseract.recognize(buf, OCR_LANG);
    return text || "";
  } catch (e) {
    console.error("OCR error:", e.message);
    return "";
  }
}

// ==== WhatsApp client ====
const client = new Client({
  authStrategy: new LocalAuth({ dataPath: AUTH_DIR }),
  puppeteer: {
    headless: true,
    args: ["--no-sandbox", "--disable-setuid-sandbox"]
  }
});

client.on("qr", qr => qrcode.generate(qr, { small: true }));
client.on("ready", () => console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WhatsApp"));

client.on("message", async msg => {
  const chat = await msg.getChat();

  // === –õ–ò–ß–ö–ê: –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ ===
  if (!chat.isGroup) {
    const text = (msg.body || "").trim();
    const [cmd, phone, date] = text.split(/\s+/);

    if (cmd === "/addsub" && phone && date) {
      const list = loadWhitelist();
      list[phone.replace(/[^\d+]/g, "")] = date; // —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
      saveWhitelist(list);
      await msg.reply(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${phone} –¥–æ ${date}`);
      return;
    }

    if (cmd === "/removesub" && phone) {
      const list = loadWhitelist();
      delete list[phone.replace(/[^\d+]/g, "")];
      saveWhitelist(list);
      await msg.reply(`üóëÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞: ${phone}`);
      return;
    }

    if (cmd === "/showsubs") {
      const list = loadWhitelist();
      if (!Object.keys(list).length) {
        await msg.reply("üì≠ –ü–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç.");
        return;
      }
      const lines = Object.entries(list)
        .map(([p, d]) => `‚Ä¢ ${p} ‚Üí –¥–æ ${d}`)
        .join("\n");
      await msg.reply(`üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n${lines}`);
      return;
    }

    if (cmd === "/help") {
      await msg.reply(
        "–ö–æ–º–∞–Ω–¥—ã:\n" +
        "/addsub +7701xxxxxxx YYYY-MM-DD ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n" +
        "/removesub +7701xxxxxxx ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n" +
        "/showsubs ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
      );
      return;
    }

    return; // –¥—Ä—É–≥–∏–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏–º
  }

  // === –ì–†–£–ü–ü–´: –º–æ–¥–µ—Ä–∞—Ü–∏—è ===
  const authorJid = msg.author || msg.from; // –∞–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
  if (isWhitelisted(authorJid)) return;

  // 1) —Ç–µ–∫—Å—Ç
  const text = (msg.body || "");
  if (isSpamText(text)) {
    try {
      await msg.delete(true);
      console.log(`üö´ –£–¥–∞–ª–µ–Ω–æ (—Ç–µ–∫—Å—Ç): ${normalizeJid(authorJid)} ‚Üí "${text.slice(0,120)}"`);
    } catch (e) {
      console.error("Delete text failed:", e.message);
    }
    return;
  }

  // 2) –º–µ–¥–∏–∞ (OCR)
  if (ENABLE_OCR && msg.hasMedia) {
    const ocrText = await extractTextFromMedia(msg);
    if (isSpamText(ocrText)) {
      try {
        await msg.delete(true);
        console.log(`üö´ –£–¥–∞–ª–µ–Ω–æ (–∫–∞—Ä—Ç–∏–Ω–∫–∞/OCR): ${normalizeJid(authorJid)} ‚Üí "${ocrText.slice(0,120)}"`);
      } catch (e) {
        console.error("Delete media failed:", e.message);
      }
    }
  }
});

client.initialize();
