import fs from "fs";
import path from "path";
import pkg from "whatsapp-web.js";
const { Client, LocalAuth } = pkg;

// ==== –ö–æ–Ω—Ñ–∏–≥ ====
const DATA_DIR = process.env.DATA_DIR || "./data";
const AUTH_DIR = process.env.AUTH_DIR || path.join(DATA_DIR, "session");
const WHITELIST_FILE = process.env.WHITELIST_FILE || path.join(DATA_DIR, "whitelist.json");

// ==== –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç ====
[DATA_DIR, AUTH_DIR].forEach((dir) => {
  try {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log("üìÇ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞:", dir);
    }
  } catch (err) {
    console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É:", dir, err);
  }
});

// ==== –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ====
const keywords = {
  –ø—Ä–∏–≤–µ—Ç: "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –Ω–∞ Render.",
  –ø–æ–º–æ—â—å: "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: –ø—Ä–∏–≤–µ—Ç, –ø–æ–º–æ—â—å, —Ç–µ—Å—Ç",
  —Ç–µ—Å—Ç: "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!",
};

// ==== –ß—Ç–µ–Ω–∏–µ whitelist ====
let whitelist = [];
if (fs.existsSync(WHITELIST_FILE)) {
  try {
    whitelist = JSON.parse(fs.readFileSync(WHITELIST_FILE, "utf-8"));
    console.log("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω whitelist:", whitelist);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è whitelist.json", err);
  }
} else {
  console.log("‚ö†Ô∏è –§–∞–π–ª whitelist.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –≤ –±–ª–æ–∫–µ.");
}

// ==== WhatsApp –∫–ª–∏–µ–Ω—Ç ====
const client = new Client({
  authStrategy: new LocalAuth({
    dataPath: AUTH_DIR,
  }),
  puppeteer: {
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  },
});

// ==== –°–æ–±—ã—Ç–∏—è ====
client.on("qr", (qr) => {
  console.log("üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞:");
  console.log(qr);
});

client.on("ready", () => {
  console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
});

client.on("message", async (message) => {
  console.log(`üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.from}: ${message.body}`);

  if (whitelist.length > 0 && !whitelist.includes(message.from)) {
    console.log("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ whitelist, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.");
    return;
  }

  const text = message.body.toLowerCase();
  for (const key in keywords) {
    if (text.includes(key)) {
      await message.reply(keywords[key]);
      console.log(`üí¨ –û—Ç–≤–µ—Ç–∏–ª: ${keywords[key]}`);
      return;
    }
  }
});

// ==== –ó–∞–ø—É—Å–∫ ====
client.initialize();
