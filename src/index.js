const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º whitelist (–ø–æ–¥–ø–∏—Å–∫–∏)
let whitelist = {};
if (fs.existsSync('whitelist.json')) {
    whitelist = JSON.parse(fs.readFileSync('whitelist.json'));
}

// üîë –¢–≤–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ä–µ–∫–ª–∞–º—ã
const keywords = [
    "–∫—É–ø–∏—Ç—å", "—Å–∫–∏–¥–∫–∞", "–∞–∫—Ü–∏—è", "–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è",
    "—Å—Å—ã–ª–∫–∞", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", "–ø—Ä–æ–¥–∞–∂–∞", "–¥–µ—à–µ–≤–æ"
];

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
const client = new Client({
    authStrategy: new LocalAuth()
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞
client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
client.on('ready', () => {
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
function hasValidSubscription(number) {
    if (!whitelist[number]) return false;
    const until = new Date(whitelist[number]);
    return new Date() <= until;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
client.on('message', async msg => {
    const chat = await msg.getChat();

    // üìå –ï—Å–ª–∏ –≤ –ª–∏—á–∫—É ‚Üí –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    if (!chat.isGroup) {
        const parts = msg.body.trim().split(" ");

        if (parts[0] === "/addsub" && parts.length === 3) {
            const number = parts[1];
            const until = parts[2]; // —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
            whitelist[number] = until;
            fs.writeFileSync("whitelist.json", JSON.stringify(whitelist, null, 2));
            msg.reply(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è ${number} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ ${until}`);
        }

        if (parts[0] === "/showsubs") {
            let out = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫:\n";
            for (const [num, date] of Object.entries(whitelist)) {
                out += `${num} ‚Üí –¥–æ ${date}\n`;
            }
            msg.reply(out);
        }

        return;
    }

    // üìå –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É
    const author = msg.author || msg.from;
    const text = msg.body.toLowerCase();

    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –≤ –ø–æ–¥–ø–∏—Å–∫–µ ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (hasValidSubscription(author)) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if (keywords.some(k => text.includes(k))) {
        try {
            await msg.delete(true);
            console.log(`‚ùå –†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: ${msg.body}`);
        } catch (e) {
            console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", e.message);
        }
    }
});

// –ó–∞–ø—É—Å–∫
client.initialize();
